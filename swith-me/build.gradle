import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id("java")
    id('org.springframework.boot')
    id("io.spring.dependency-management")
    id("org.asciidoctor.jvm.convert")
    id("checkstyle")
    id("pmd")
    id("com.github.spotbugs")
    id("jacoco")
}

apply(from: "${rootDir}/scripts/gradle/common.gradle")
apply(from: "${rootDir}/scripts/gradle/pmd.gradle")
apply(from: "${rootDir}/scripts/gradle/checkstyle.gradle")

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

subprojects {
    apply(plugin: "java")
    apply(plugin: "java-library")
    apply(plugin: "org.springframework.boot")
    apply(plugin: "io.spring.dependency-management")
    apply(plugin: "com.github.spotbugs")
    apply(plugin: "jacoco")
    apply(from: "${rootDir}/scripts/gradle/spotbugs.gradle")

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        implementation("com.fasterxml.uuid:java-uuid-generator:${uuidVersion}")

        // SpotBugs
        spotbugsPlugins("com.h3xstream.findsecbugs:findsecbugs-plugin:${findBugsVersion}")

        // Test
        testImplementation("org.springframework.boot:spring-boot-starter-test")

        // QueryDSL
        api("com.querydsl:querydsl-jpa:${queryDSLVersion}:jakarta")

        // Lombok
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
        annotationProcessor("com.querydsl:querydsl-apt:${queryDSLVersion}:jakarta")
        annotationProcessor("jakarta.annotation:jakarta.annotation-api")
        annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    }

    jacocoTestReport {
        dependsOn test
        def exclusions = extractQClass()
        file("${rootDir}/config/jacoco/exclude-coverage.txt").eachLine {
            exclusions.add(it)
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [] + exclusions)
            }))
        }
        finalizedBy jacocoTestCoverageVerification
    }

    jacocoTestCoverageVerification {
        def exclusions = extractQClass()
        file("${rootDir}/config/jacoco/exclude-verification.txt").eachLine {
            exclusions.add(it)
        }

        violationRules {
            rule {
                enabled = true;
                element = 'CLASS'

                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.7
                    excludes = [] + exclusions
                }
            }
        }
    }

    tasks.test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

static def extractQClass() {
    def qClasses = []
    for (qPattern in '*.QA'..'*.QZ') {
        qClasses.add(qPattern + '*')
    }
    return qClasses
}

tasks.named("bootJar") {
    enabled = true
}

tasks.named("jar") {
    enabled = false
}
