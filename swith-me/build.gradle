import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id("java")
    id('org.springframework.boot')
    id("io.spring.dependency-management")
    id("org.asciidoctor.jvm.convert")
    id("com.epages.restdocs-api-spec")
    id("org.hidetake.swagger.generator")
    id("checkstyle")
    id("pmd")
    id("com.github.spotbugs")
    id("jacoco")
}

apply(from: "${rootDir}/scripts/gradle/common.gradle")
apply(from: "${rootDir}/scripts/gradle/pmd.gradle")
apply(from: "${rootDir}/scripts/gradle/checkstyle.gradle")

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

subprojects {
    apply(plugin: "java")
    apply(plugin: "java-library")
    apply(plugin: "org.springframework.boot")
    apply(plugin: "io.spring.dependency-management")
    apply(plugin: "com.github.spotbugs")
    apply(plugin: "jacoco")
    apply(from: "${rootDir}/scripts/gradle/spotbugs.gradle")
    apply(from: "${rootDir}/scripts/gradle/jacoco.gradle")

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
        implementation(group: 'com.fasterxml.uuid', name: 'java-uuid-generator', version: '3.1.4')

        // SpotBugs
        spotbugsPlugins("com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0")

        // Test
        testImplementation("org.springframework.boot:spring-boot-starter-test")

        // QueryDSL
        api("com.querydsl:querydsl-jpa:5.0.0:jakarta")

        // Lombok
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
        annotationProcessor("com.querydsl:querydsl-apt:5.0.0:jakarta")
        annotationProcessor("jakarta.annotation:jakarta.annotation-api")
        annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    }

    tasks.test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    tasks.withType(SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

configurations {
    asciidoctorExtensions
}

openapi3 {
    setServer("http://localhost:8080")
    title = "Study-With-Me API 문서"
    description = "Study-With-Me API 문서"
    version = '0.1.0'
    format = "yaml"
}

tasks.named('bootJar') {
    enabled = false
}

tasks.named('jar') {
    enabled = true
}
