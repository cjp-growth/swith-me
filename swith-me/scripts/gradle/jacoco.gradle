jacocoTestReport {
    dependsOn test
    def qClasses = []
    for (qPattern in "**/QA".."**/QZ") {
        qClasses.add(qPattern + "*")
    }

    def exclusions = []
    file("${rootDir}/lint-config/jacoco/exclude-coverage.txt").eachLine {
        exclusions.add(it)
    }

    exclusions.addAll(qClasses)

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [] + exclusions)
        }))
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    def qClasses = []
    for (qPattern in '*.QA'..'*.QZ') {
        qClasses.add(qPattern + '*')
    }

    def exclusions = []
    file("${rootDir}/lint-config/jacoco/exclude-verification.txt").eachLine {
        exclusions.add(it)
    }

    exclusions.addAll(qClasses)

    violationRules {
        rule {
            enabled = true;
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.7
            excludes = [] + exclusions
        }
    }
}
