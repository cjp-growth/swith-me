import org.springframework.boot.gradle.tasks.bundling.BootJar

buildscript {
    ext {
        springBootVersion = "3.0.7"
        snippetsDir = file('build/generated-snippets')
        springDependencyManagementVersion = "1.1.0"
        restdocsApiSpecVersion = "0.17.1"
        jvmConvertVersion = "3.3.2"
        swaggerVersion = "2.18.2"
        checkStyleVersion = "10.2"
        pmdVersion = "6.52.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'org.asciidoctor.jvm.convert' version "${jvmConvertVersion}"
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    id 'org.hidetake.swagger.generator' version "${swaggerVersion}"
    id 'checkstyle'
    id 'pmd'
}

group = 'project.swith-me'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

pmd {
    toolVersion = pmdVersion
    pmdTest.enabled = true
    consoleOutput = true
    ignoreFailures = false
    ruleSetFiles = files("${rootDir}/lint-config/pmd/pmd-rules.xml")
}

checkstyle {
    maxWarnings = 0
    configFile = file("${rootDir}/lint-config/checkstyle/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "${rootDir}/config/checkstyle/naver-checkstyle-suppressions.xml"]
    toolVersion = checkStyleVersion
}

swaggerSources {
    sample {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

configurations {
    asciidoctorExtensions
}

openapi3 {
    setServer("http://localhost:8080")
    title = 'Study-With-Me API 문서'
    description = 'Study-With-Me API 문서'
    version = '0.0.1'
    format = 'yaml'
}

swaggerSources {
    sample {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-webflux')
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    implementation("com.github.ben-manes.caffeine:caffeine")
    swaggerUI("org.webjars:swagger-ui")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation(group: 'mysql', name: 'mysql-connector-java', version: '8.0.28')

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation "com.epages:restdocs-api-spec-restassured:${restdocsApiSpecVersion}"
    testImplementation("io.rest-assured:rest-assured")
    testImplementation("org.springframework.restdocs:spring-restdocs-restassured")
    asciidoctorExtensions('org.springframework.restdocs:spring-restdocs-asciidoctor')

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testAnnotationProcessor("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")
}

tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
}

test {
    useJUnitPlatform()
}

tasks.withType(BootJar) {
    dependsOn 'copySwaggerUI'
}
